<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
               http://dubbo.apache.org/schema/dubbo
               http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <!--必须要遵守的一个原则：接口服务要写注释-->
    <!-- 提供方应用信息，用于计算依赖关系 命名：服务名+卫星型号代号（tmf-sat001）或者 服务名（ServiceMan） -->
    <dubbo:application name="ServiceMan-provider"/>
    <!-- qos.port 同一个机器需要区分端口，需要人工维护一个服务和端口的关系表，发布需要确认机器、端口 -->
    <!--        <dubbo:parameter key="qos.port" value="3333"/>-->
    <!-- 使用 Zookeeper 注册中心暴露服务地址 ，超时时间：局域网内：5000，局域网外：60000-->
    <dubbo:registry id="Beijing" address="zookeeper://192.168.0.150:2182" timeout="50000"/>

    <!-- 用dubbo协议在20880端口暴露服务，同一个机器需要区分端口，需要人工维护一个服务和端口的关系表，发布需要确认机器、端口
     payload 消息体大小，根据实际业务情况自定 -->
    <!-- 序列化建议使用 kryo 方式，需要引入 kryo jar包 serialization ="kryo"，建议版本 0.42-->
    <dubbo:protocol name="dubbo" port="20881" payload="1024000" serialization="kryo"/>

    <!--消费者-->
    <!--关闭服务消费方所有服务的启动检查。dubbo缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止Spring初始化完成。url="dubbo//172.16.1.112:20880"-->
    <!--  <dubbo:consumer check="false" />-->
    <!--reference 采用xml配置实现,在代码中获取远程服务需要加注解@Autowired-->
    <!--    <dubbo:reference id="taskSchedulingService" check="false"  interface="com.vale.ooc.server.service.TaskSchedulingService" version="1.0.0"/>-->
    <!--<dubbo:annotation package="com.vela.*"/>-->

    <!-- 声明需要暴露的服务接口 -->
    <!-- group和version用于定位服务 -->
    <!--group：scc1.0 统一命名不允许修改   -->
    <!--version：1.0.0，随着软件版本迭代更新   -->
    <!-- executes 控制服务器端并发执行（或占用线程池线程数）数量，executes= 7，如果业务量大可以酌情修改-->


    <!--测试类-->
    <!--<dubbo:service interface="com.cast.serviceman.api.service.UserService" ref="user" group="serviceman1.0"-->
    <!--version="1.0.0" registry="Beijing"/>-->
    <!--<bean id="user" class="com.cast.serviceman.server.service.UserServiceImpl"/>-->


</beans>